// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'Entities/BackupConnectedServiceContent.dart';
import 'Entities/Playlist.dart';
import 'Entities/Song.dart';
import 'Entities/TrackClip.dart';
import 'Entities/TrackClipPlaylist.dart';
import 'Entities/UserConnectedMusicServiceDB.dart';
import 'Entities/UserProfileDB.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 8206777011072132457),
      name: 'Song',
      lastPropertyId: const obx_int.IdUid(15, 3976833749141121159),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3646475469489993490),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5228567039344799239),
            name: 'trackURI',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7387107985471698676),
            name: 'artistName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6665638574963001440),
            name: 'songName',
            type: 9,
            flags: 8,
            indexId: const obx_int.IdUid(1, 8539712309826801651)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3683664839647536894),
            name: 'songImage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8920691947168484270),
            name: 'artistImage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2696696614971057640),
            name: 'albumImage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1667901264461299139),
            name: 'albumName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4544284274229552321),
            name: 'imageURL',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 643646780825996892),
            name: 'trackID',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 7243118679844518903),
            name: 'musicLibraryServiceDB',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 2938041381718720521),
            name: 'durationDB',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 3976833749141121159),
            name: 'backupId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(9, 533724143938896267),
            relationTarget: 'BackupConnectedServiceContent')
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(5, 6560852354575974672),
            name: 'playlistDB',
            targetId: const obx_int.IdUid(2, 38032209886724473)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(6, 5625999409191442660),
            name: 'trackClipsDB',
            targetId: const obx_int.IdUid(3, 5317744468143076040))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 38032209886724473),
      name: 'Playlist',
      lastPropertyId: const obx_int.IdUid(10, 7491811255347019236),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2507107500663129673),
            name: 'dbID',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7436726987951804204),
            name: 'id',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4697120687347050823),
            name: 'uri',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8419196685553452409),
            name: 'name',
            type: 9,
            flags: 8,
            indexId: const obx_int.IdUid(2, 7219058948244518911)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8570848902807533601),
            name: 'ownerName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8303534634111930878),
            name: 'imageUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 9114359661719988938),
            name: 'totalTracks',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 2952492968814855538),
            name: 'userMusicStreamingServiceAccountId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(6, 77858185340425533),
            relationTarget: 'UserConnectedMusicService'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 340917540280358045),
            name: 'backupId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(8, 3804280957664001465),
            relationTarget: 'BackupConnectedServiceContent'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 7491811255347019236),
            name: 'musicLibraryServiceDB',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(4, 7680320796412216355),
            name: 'songsDB',
            targetId: const obx_int.IdUid(1, 8206777011072132457))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 5317744468143076040),
      name: 'TrackClip',
      lastPropertyId: const obx_int.IdUid(14, 8210351766372133414),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6511364109274843455),
            name: 'ID',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4379171595982887829),
            name: 'dbID',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4903020926541020981),
            name: 'clipPoints',
            type: 28,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1616742170277854338),
            name: 'clipName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2075548201034169425),
            name: 'clipDescription',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4452295220155678308),
            name: 'dateCreated',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 805590282630427560),
            name: 'clipLengthDB',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 5423191633874623565),
            name: 'musicLibraryServiceDB',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 8764570932977687374),
            name: 'linkedSongDBId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(5, 1185253801173147599),
            relationTarget: 'Song'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 308455942180562499),
            name: 'backupId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(10, 1318873852091833423),
            relationTarget: 'BackupConnectedServiceContent'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 8210351766372133414),
            name: 'linkedTrackClipPlaylistsForCache',
            type: 26,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(11, 6329358754405982976),
            name: 'linkedPlaylistsDB',
            targetId: const obx_int.IdUid(4, 5891164408967352254))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 5891164408967352254),
      name: 'TrackClipPlaylist',
      lastPropertyId: const obx_int.IdUid(4, 4386621581706981260),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7878616718681556215),
            name: 'dbID',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6556394252372289609),
            name: 'playlistID',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2448660179705142332),
            name: 'playlistName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4386621581706981260),
            name: 'dateCreated',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(7, 5011536864274221388),
            name: 'clipsDB',
            targetId: const obx_int.IdUid(3, 5317744468143076040))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 5847052262546585380),
      name: 'UserConnectedMusicService',
      lastPropertyId: const obx_int.IdUid(5, 1434238896907544753),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4444769691680332144),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 27490556055955667),
            name: 'accessToken',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 869272187348887856),
            name: 'refreshToken',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7837593114993218792),
            name: 'connectedUserDBId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(7, 6872033909649812997),
            relationTarget: 'UserProfileDB'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1434238896907544753),
            name: 'musicLibraryServiceDB',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(8, 6391866633536201104),
            name: 'userPlaylistsDB',
            targetId: const obx_int.IdUid(2, 38032209886724473))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 2247108447826571828),
      name: 'UserProfileDB',
      lastPropertyId: const obx_int.IdUid(1, 5805537477370951392),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5805537477370951392),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(9, 7293152528198126790),
            name: 'allTrackClipsDB',
            targetId: const obx_int.IdUid(3, 5317744468143076040)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(10, 1384838242840462835),
            name: 'allTrackClipPlaylistsDB',
            targetId: const obx_int.IdUid(4, 5891164408967352254))
      ],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'connectedMusicStreamingServices',
            srcEntity: 'UserConnectedMusicService',
            srcField: 'connectedUserDB'),
        obx_int.ModelBacklink(
            name: 'streamingServiceBackups',
            srcEntity: 'BackupConnectedServiceContent',
            srcField: '')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 357874240679407431),
      name: 'BackupConnectedServiceContent',
      lastPropertyId: const obx_int.IdUid(3, 8729719097233942423),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 744737165570003859),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 958550599501832137),
            name: 'musicServiceDB',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8729719097233942423),
            name: 'linkedUserId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(11, 8794542164921285304),
            relationTarget: 'UserProfileDB')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'cachedPlaylists', srcEntity: 'Playlist', srcField: 'backup'),
        obx_int.ModelBacklink(
            name: 'cachedSongs', srcEntity: 'Song', srcField: 'backup'),
        obx_int.ModelBacklink(
            name: 'cachedTrackClips',
            srcEntity: 'TrackClip',
            srcField: 'backup')
      ])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(7, 357874240679407431),
      lastIndexId: const obx_int.IdUid(11, 8794542164921285304),
      lastRelationId: const obx_int.IdUid(11, 6329358754405982976),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [8833976317866044219, 2273690582270434786],
      retiredPropertyUids: const [
        6391799891432596002,
        6281726068887092049,
        1374063591372238592,
        4428027612275503602,
        2683385237213603353
      ],
      retiredRelationUids: const [
        6404008765985708642,
        7166231114413923972,
        2660829391060280724
      ],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Song: obx_int.EntityDefinition<Song>(
        model: _entities[0],
        toOneRelations: (Song object) => [object.backup],
        toManyRelations: (Song object) => {
              obx_int.RelInfo<Song>.toMany(5, object.id!): object.playlistDB,
              obx_int.RelInfo<Song>.toMany(6, object.id!): object.trackClipsDB
            },
        getId: (Song object) => object.id,
        setId: (Song object, int id) {
          object.id = id;
        },
        objectToFB: (Song object, fb.Builder fbb) {
          final trackURIOffset = fbb.writeString(object.trackURI);
          final artistNameOffset = object.artistName == null
              ? null
              : fbb.writeString(object.artistName!);
          final songNameOffset = object.songName == null
              ? null
              : fbb.writeString(object.songName!);
          final songImageOffset = object.songImage == null
              ? null
              : fbb.writeString(object.songImage!);
          final artistImageOffset = object.artistImage == null
              ? null
              : fbb.writeString(object.artistImage!);
          final albumImageOffset = object.albumImage == null
              ? null
              : fbb.writeString(object.albumImage!);
          final albumNameOffset = object.albumName == null
              ? null
              : fbb.writeString(object.albumName!);
          final imageURLOffset = object.imageURL == null
              ? null
              : fbb.writeString(object.imageURL!);
          final trackIDOffset =
              object.trackID == null ? null : fbb.writeString(object.trackID!);
          final musicLibraryServiceDBOffset =
              fbb.writeString(object.musicLibraryServiceDB);
          fbb.startTable(16);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, trackURIOffset);
          fbb.addOffset(2, artistNameOffset);
          fbb.addOffset(3, songNameOffset);
          fbb.addOffset(4, songImageOffset);
          fbb.addOffset(5, artistImageOffset);
          fbb.addOffset(6, albumImageOffset);
          fbb.addOffset(7, albumNameOffset);
          fbb.addOffset(8, imageURLOffset);
          fbb.addOffset(9, trackIDOffset);
          fbb.addOffset(12, musicLibraryServiceDBOffset);
          fbb.addInt64(13, object.durationDB);
          fbb.addInt64(14, object.backup.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final trackIDParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final trackURIParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final artistNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final songNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final songImageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final artistImageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final albumImageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final albumNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final imageURLParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final object = Song(
              id: idParam,
              trackID: trackIDParam,
              trackURI: trackURIParam,
              artistName: artistNameParam,
              songName: songNameParam,
              songImage: songImageParam,
              artistImage: artistImageParam,
              albumImage: albumImageParam,
              albumName: albumNameParam,
              imageURL: imageURLParam)
            ..musicLibraryServiceDB =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 28, '')
            ..durationDB =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          object.backup.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0);
          object.backup.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<Song>(object.playlistDB,
              store, obx_int.RelInfo<Song>.toMany(5, object.id!));
          obx_int.InternalToManyAccess.setRelInfo<Song>(object.trackClipsDB,
              store, obx_int.RelInfo<Song>.toMany(6, object.id!));
          return object;
        }),
    Playlist: obx_int.EntityDefinition<Playlist>(
        model: _entities[1],
        toOneRelations: (Playlist object) =>
            [object.userMusicStreamingServiceAccount, object.backup],
        toManyRelations: (Playlist object) =>
            {obx_int.RelInfo<Playlist>.toMany(4, object.dbID!): object.songsDB},
        getId: (Playlist object) => object.dbID,
        setId: (Playlist object, int id) {
          object.dbID = id;
        },
        objectToFB: (Playlist object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final uriOffset =
              object.uri == null ? null : fbb.writeString(object.uri!);
          final nameOffset = fbb.writeString(object.name);
          final ownerNameOffset = object.ownerName == null
              ? null
              : fbb.writeString(object.ownerName!);
          final imageUrlOffset = object.imageUrl == null
              ? null
              : fbb.writeString(object.imageUrl!);
          final musicLibraryServiceDBOffset =
              fbb.writeString(object.musicLibraryServiceDB);
          fbb.startTable(11);
          fbb.addInt64(0, object.dbID ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, uriOffset);
          fbb.addOffset(3, nameOffset);
          fbb.addOffset(4, ownerNameOffset);
          fbb.addOffset(5, imageUrlOffset);
          fbb.addInt64(6, object.totalTracks);
          fbb.addInt64(7, object.userMusicStreamingServiceAccount.targetId);
          fbb.addInt64(8, object.backup.targetId);
          fbb.addOffset(9, musicLibraryServiceDBOffset);
          fbb.finish(fbb.endTable());
          return object.dbID ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dbIDParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final uriParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final ownerNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final imageUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final totalTracksParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final object = Playlist(
              dbID: dbIDParam,
              id: idParam,
              uri: uriParam,
              name: nameParam,
              ownerName: ownerNameParam,
              imageUrl: imageUrlParam,
              totalTracks: totalTracksParam)
            ..musicLibraryServiceDB =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 22, '');
          object.userMusicStreamingServiceAccount.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.userMusicStreamingServiceAccount.attach(store);
          object.backup.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.backup.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<Playlist>(object.songsDB,
              store, obx_int.RelInfo<Playlist>.toMany(4, object.dbID!));
          return object;
        }),
    TrackClip: obx_int.EntityDefinition<TrackClip>(
        model: _entities[2],
        toOneRelations: (TrackClip object) =>
            [object.linkedSongDB, object.backup],
        toManyRelations: (TrackClip object) => {
              obx_int.RelInfo<TrackClip>.toMany(11, object.dbID!):
                  object.linkedPlaylistsDB
            },
        getId: (TrackClip object) => object.dbID,
        setId: (TrackClip object, int id) {
          object.dbID = id;
        },
        objectToFB: (TrackClip object, fb.Builder fbb) {
          final IDOffset = fbb.writeString(object.ID);
          final clipPointsOffset = fbb.writeListFloat32(object.clipPoints);
          final clipNameOffset = fbb.writeString(object.clipName);
          final clipDescriptionOffset = object.clipDescription == null
              ? null
              : fbb.writeString(object.clipDescription!);
          final musicLibraryServiceDBOffset =
              fbb.writeString(object.musicLibraryServiceDB);
          final linkedTrackClipPlaylistsForCacheOffset =
              object.linkedTrackClipPlaylistsForCache == null
                  ? null
                  : fbb
                      .writeListInt32(object.linkedTrackClipPlaylistsForCache!);
          fbb.startTable(15);
          fbb.addOffset(0, IDOffset);
          fbb.addInt64(1, object.dbID ?? 0);
          fbb.addOffset(3, clipPointsOffset);
          fbb.addOffset(4, clipNameOffset);
          fbb.addOffset(5, clipDescriptionOffset);
          fbb.addInt64(6, object.dateCreated.millisecondsSinceEpoch);
          fbb.addInt64(7, object.clipLengthDB);
          fbb.addOffset(8, musicLibraryServiceDBOffset);
          fbb.addInt64(11, object.linkedSongDB.targetId);
          fbb.addInt64(12, object.backup.targetId);
          fbb.addOffset(13, linkedTrackClipPlaylistsForCacheOffset);
          fbb.finish(fbb.endTable());
          return object.dbID ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final clipPointsParam =
              const fb.ListReader<double>(fb.Float32Reader(), lazy: false)
                  .vTableGet(buffer, rootOffset, 10, []);
          final clipNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final clipDescriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final dateCreatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0));
          final IDParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 4, '');
          final object = TrackClip(
              clipPoints: clipPointsParam,
              clipName: clipNameParam,
              clipDescription: clipDescriptionParam,
              dateCreated: dateCreatedParam,
              ID: IDParam)
            ..dbID =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6)
            ..clipLengthDB =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)
            ..musicLibraryServiceDB =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 20, '')
            ..linkedTrackClipPlaylistsForCache =
                const fb.ListReader<int>(fb.Int32Reader(), lazy: false)
                    .vTableGetNullable(buffer, rootOffset, 30);
          object.linkedSongDB.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.linkedSongDB.attach(store);
          object.backup.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.backup.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<TrackClip>(
              object.linkedPlaylistsDB,
              store,
              obx_int.RelInfo<TrackClip>.toMany(11, object.dbID!));
          return object;
        }),
    TrackClipPlaylist: obx_int.EntityDefinition<TrackClipPlaylist>(
        model: _entities[3],
        toOneRelations: (TrackClipPlaylist object) => [],
        toManyRelations: (TrackClipPlaylist object) => {
              obx_int.RelInfo<TrackClipPlaylist>.toMany(7, object.dbID!):
                  object.clipsDB
            },
        getId: (TrackClipPlaylist object) => object.dbID,
        setId: (TrackClipPlaylist object, int id) {
          object.dbID = id;
        },
        objectToFB: (TrackClipPlaylist object, fb.Builder fbb) {
          final playlistIDOffset = fbb.writeString(object.playlistID);
          final playlistNameOffset = fbb.writeString(object.playlistName);
          fbb.startTable(5);
          fbb.addInt64(0, object.dbID ?? 0);
          fbb.addOffset(1, playlistIDOffset);
          fbb.addOffset(2, playlistNameOffset);
          fbb.addInt64(3, object.dateCreated?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.dbID ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateCreatedValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final playlistIDParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final playlistNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final dateCreatedParam = dateCreatedValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(dateCreatedValue);
          final object = TrackClipPlaylist(
              playlistID: playlistIDParam,
              playlistName: playlistNameParam,
              dateCreated: dateCreatedParam)
            ..dbID =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          obx_int.InternalToManyAccess.setRelInfo<TrackClipPlaylist>(
              object.clipsDB,
              store,
              obx_int.RelInfo<TrackClipPlaylist>.toMany(7, object.dbID!));
          return object;
        }),
    UserConnectedMusicService: obx_int.EntityDefinition<
            UserConnectedMusicService>(
        model: _entities[4],
        toOneRelations: (UserConnectedMusicService object) =>
            [object.connectedUserDB],
        toManyRelations: (UserConnectedMusicService object) => {
              obx_int.RelInfo<UserConnectedMusicService>.toMany(8, object.id):
                  object.userPlaylistsDB
            },
        getId: (UserConnectedMusicService object) => object.id,
        setId: (UserConnectedMusicService object, int id) {
          object.id = id;
        },
        objectToFB: (UserConnectedMusicService object, fb.Builder fbb) {
          final accessTokenOffset = object.accessToken == null
              ? null
              : fbb.writeString(object.accessToken!);
          final refreshTokenOffset = object.refreshToken == null
              ? null
              : fbb.writeString(object.refreshToken!);
          final musicLibraryServiceDBOffset =
              fbb.writeString(object.musicLibraryServiceDB);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, accessTokenOffset);
          fbb.addOffset(2, refreshTokenOffset);
          fbb.addInt64(3, object.connectedUserDB.targetId);
          fbb.addOffset(4, musicLibraryServiceDBOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = UserConnectedMusicService()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..accessToken = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..refreshToken = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..musicLibraryServiceDB =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 12, '');
          object.connectedUserDB.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.connectedUserDB.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<UserConnectedMusicService>(
              object.userPlaylistsDB,
              store,
              obx_int.RelInfo<UserConnectedMusicService>.toMany(8, object.id));
          return object;
        }),
    UserProfileDB: obx_int.EntityDefinition<UserProfileDB>(
        model: _entities[5],
        toOneRelations: (UserProfileDB object) => [],
        toManyRelations: (UserProfileDB object) => {
              obx_int.RelInfo<UserProfileDB>.toMany(9, object.id):
                  object.allTrackClipsDB,
              obx_int.RelInfo<UserProfileDB>.toMany(10, object.id):
                  object.allTrackClipPlaylistsDB,
              obx_int.RelInfo<UserConnectedMusicService>.toOneBacklink(
                      4,
                      object.id,
                      (UserConnectedMusicService srcObject) =>
                          srcObject.connectedUserDB):
                  object.connectedMusicStreamingServices,
              obx_int.RelInfo<BackupConnectedServiceContent>.toOneBacklink(
                  3,
                  object.id,
                  (BackupConnectedServiceContent srcObject) =>
                      srcObject.linkedUser): object.streamingServiceBackups
            },
        getId: (UserProfileDB object) => object.id,
        setId: (UserProfileDB object, int id) {
          object.id = id;
        },
        objectToFB: (UserProfileDB object, fb.Builder fbb) {
          fbb.startTable(2);
          fbb.addInt64(0, object.id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = UserProfileDB()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          obx_int.InternalToManyAccess.setRelInfo<UserProfileDB>(
              object.allTrackClipsDB,
              store,
              obx_int.RelInfo<UserProfileDB>.toMany(9, object.id));
          obx_int.InternalToManyAccess.setRelInfo<UserProfileDB>(
              object.allTrackClipPlaylistsDB,
              store,
              obx_int.RelInfo<UserProfileDB>.toMany(10, object.id));
          obx_int.InternalToManyAccess.setRelInfo<UserProfileDB>(
              object.connectedMusicStreamingServices,
              store,
              obx_int.RelInfo<UserConnectedMusicService>.toOneBacklink(
                  4,
                  object.id,
                  (UserConnectedMusicService srcObject) =>
                      srcObject.connectedUserDB));
          obx_int.InternalToManyAccess.setRelInfo<UserProfileDB>(
              object.streamingServiceBackups,
              store,
              obx_int.RelInfo<BackupConnectedServiceContent>.toOneBacklink(
                  3,
                  object.id,
                  (BackupConnectedServiceContent srcObject) =>
                      srcObject.linkedUser));
          return object;
        }),
    BackupConnectedServiceContent: obx_int.EntityDefinition<
            BackupConnectedServiceContent>(
        model: _entities[6],
        toOneRelations: (BackupConnectedServiceContent object) =>
            [object.linkedUser],
        toManyRelations: (BackupConnectedServiceContent object) => {
              obx_int.RelInfo<Playlist>.toOneBacklink(
                      9, object.id, (Playlist srcObject) => srcObject.backup):
                  object.cachedPlaylists,
              obx_int.RelInfo<Song>.toOneBacklink(
                      15, object.id, (Song srcObject) => srcObject.backup):
                  object.cachedSongs,
              obx_int.RelInfo<TrackClip>.toOneBacklink(
                      13, object.id, (TrackClip srcObject) => srcObject.backup):
                  object.cachedTrackClips
            },
        getId: (BackupConnectedServiceContent object) => object.id,
        setId: (BackupConnectedServiceContent object, int id) {
          object.id = id;
        },
        objectToFB: (BackupConnectedServiceContent object, fb.Builder fbb) {
          final musicServiceDBOffset = fbb.writeString(object.musicServiceDB);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, musicServiceDBOffset);
          fbb.addInt64(2, object.linkedUser.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = BackupConnectedServiceContent()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..musicServiceDB = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '');
          object.linkedUser.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.linkedUser.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<
                  BackupConnectedServiceContent>(
              object.cachedPlaylists,
              store,
              obx_int.RelInfo<Playlist>.toOneBacklink(
                  9, object.id, (Playlist srcObject) => srcObject.backup));
          obx_int.InternalToManyAccess.setRelInfo<
                  BackupConnectedServiceContent>(
              object.cachedSongs,
              store,
              obx_int.RelInfo<Song>.toOneBacklink(
                  15, object.id, (Song srcObject) => srcObject.backup));
          obx_int.InternalToManyAccess.setRelInfo<
                  BackupConnectedServiceContent>(
              object.cachedTrackClips,
              store,
              obx_int.RelInfo<TrackClip>.toOneBacklink(
                  13, object.id, (TrackClip srcObject) => srcObject.backup));
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Song] entity fields to define ObjectBox queries.
class Song_ {
  /// See [Song.id].
  static final id = obx.QueryIntegerProperty<Song>(_entities[0].properties[0]);

  /// See [Song.trackURI].
  static final trackURI =
      obx.QueryStringProperty<Song>(_entities[0].properties[1]);

  /// See [Song.artistName].
  static final artistName =
      obx.QueryStringProperty<Song>(_entities[0].properties[2]);

  /// See [Song.songName].
  static final songName =
      obx.QueryStringProperty<Song>(_entities[0].properties[3]);

  /// See [Song.songImage].
  static final songImage =
      obx.QueryStringProperty<Song>(_entities[0].properties[4]);

  /// See [Song.artistImage].
  static final artistImage =
      obx.QueryStringProperty<Song>(_entities[0].properties[5]);

  /// See [Song.albumImage].
  static final albumImage =
      obx.QueryStringProperty<Song>(_entities[0].properties[6]);

  /// See [Song.albumName].
  static final albumName =
      obx.QueryStringProperty<Song>(_entities[0].properties[7]);

  /// See [Song.imageURL].
  static final imageURL =
      obx.QueryStringProperty<Song>(_entities[0].properties[8]);

  /// See [Song.trackID].
  static final trackID =
      obx.QueryStringProperty<Song>(_entities[0].properties[9]);

  /// See [Song.musicLibraryServiceDB].
  static final musicLibraryServiceDB =
      obx.QueryStringProperty<Song>(_entities[0].properties[10]);

  /// See [Song.durationDB].
  static final durationDB =
      obx.QueryIntegerProperty<Song>(_entities[0].properties[11]);

  /// See [Song.backup].
  static final backup =
      obx.QueryRelationToOne<Song, BackupConnectedServiceContent>(
          _entities[0].properties[12]);

  /// see [Song.playlistDB]
  static final playlistDB =
      obx.QueryRelationToMany<Song, Playlist>(_entities[0].relations[0]);

  /// see [Song.trackClipsDB]
  static final trackClipsDB =
      obx.QueryRelationToMany<Song, TrackClip>(_entities[0].relations[1]);
}

/// [Playlist] entity fields to define ObjectBox queries.
class Playlist_ {
  /// See [Playlist.dbID].
  static final dbID =
      obx.QueryIntegerProperty<Playlist>(_entities[1].properties[0]);

  /// See [Playlist.id].
  static final id =
      obx.QueryStringProperty<Playlist>(_entities[1].properties[1]);

  /// See [Playlist.uri].
  static final uri =
      obx.QueryStringProperty<Playlist>(_entities[1].properties[2]);

  /// See [Playlist.name].
  static final name =
      obx.QueryStringProperty<Playlist>(_entities[1].properties[3]);

  /// See [Playlist.ownerName].
  static final ownerName =
      obx.QueryStringProperty<Playlist>(_entities[1].properties[4]);

  /// See [Playlist.imageUrl].
  static final imageUrl =
      obx.QueryStringProperty<Playlist>(_entities[1].properties[5]);

  /// See [Playlist.totalTracks].
  static final totalTracks =
      obx.QueryIntegerProperty<Playlist>(_entities[1].properties[6]);

  /// See [Playlist.userMusicStreamingServiceAccount].
  static final userMusicStreamingServiceAccount =
      obx.QueryRelationToOne<Playlist, UserConnectedMusicService>(
          _entities[1].properties[7]);

  /// See [Playlist.backup].
  static final backup =
      obx.QueryRelationToOne<Playlist, BackupConnectedServiceContent>(
          _entities[1].properties[8]);

  /// See [Playlist.musicLibraryServiceDB].
  static final musicLibraryServiceDB =
      obx.QueryStringProperty<Playlist>(_entities[1].properties[9]);

  /// see [Playlist.songsDB]
  static final songsDB =
      obx.QueryRelationToMany<Playlist, Song>(_entities[1].relations[0]);
}

/// [TrackClip] entity fields to define ObjectBox queries.
class TrackClip_ {
  /// See [TrackClip.ID].
  static final ID =
      obx.QueryStringProperty<TrackClip>(_entities[2].properties[0]);

  /// See [TrackClip.dbID].
  static final dbID =
      obx.QueryIntegerProperty<TrackClip>(_entities[2].properties[1]);

  /// See [TrackClip.clipPoints].
  static final clipPoints =
      obx.QueryDoubleVectorProperty<TrackClip>(_entities[2].properties[2]);

  /// See [TrackClip.clipName].
  static final clipName =
      obx.QueryStringProperty<TrackClip>(_entities[2].properties[3]);

  /// See [TrackClip.clipDescription].
  static final clipDescription =
      obx.QueryStringProperty<TrackClip>(_entities[2].properties[4]);

  /// See [TrackClip.dateCreated].
  static final dateCreated =
      obx.QueryDateProperty<TrackClip>(_entities[2].properties[5]);

  /// See [TrackClip.clipLengthDB].
  static final clipLengthDB =
      obx.QueryIntegerProperty<TrackClip>(_entities[2].properties[6]);

  /// See [TrackClip.musicLibraryServiceDB].
  static final musicLibraryServiceDB =
      obx.QueryStringProperty<TrackClip>(_entities[2].properties[7]);

  /// See [TrackClip.linkedSongDB].
  static final linkedSongDB =
      obx.QueryRelationToOne<TrackClip, Song>(_entities[2].properties[8]);

  /// See [TrackClip.backup].
  static final backup =
      obx.QueryRelationToOne<TrackClip, BackupConnectedServiceContent>(
          _entities[2].properties[9]);

  /// See [TrackClip.linkedTrackClipPlaylistsForCache].
  static final linkedTrackClipPlaylistsForCache =
      obx.QueryIntegerVectorProperty<TrackClip>(_entities[2].properties[10]);

  /// see [TrackClip.linkedPlaylistsDB]
  static final linkedPlaylistsDB =
      obx.QueryRelationToMany<TrackClip, TrackClipPlaylist>(
          _entities[2].relations[0]);
}

/// [TrackClipPlaylist] entity fields to define ObjectBox queries.
class TrackClipPlaylist_ {
  /// See [TrackClipPlaylist.dbID].
  static final dbID =
      obx.QueryIntegerProperty<TrackClipPlaylist>(_entities[3].properties[0]);

  /// See [TrackClipPlaylist.playlistID].
  static final playlistID =
      obx.QueryStringProperty<TrackClipPlaylist>(_entities[3].properties[1]);

  /// See [TrackClipPlaylist.playlistName].
  static final playlistName =
      obx.QueryStringProperty<TrackClipPlaylist>(_entities[3].properties[2]);

  /// See [TrackClipPlaylist.dateCreated].
  static final dateCreated =
      obx.QueryDateProperty<TrackClipPlaylist>(_entities[3].properties[3]);

  /// see [TrackClipPlaylist.clipsDB]
  static final clipsDB = obx.QueryRelationToMany<TrackClipPlaylist, TrackClip>(
      _entities[3].relations[0]);
}

/// [UserConnectedMusicService] entity fields to define ObjectBox queries.
class UserConnectedMusicService_ {
  /// See [UserConnectedMusicService.id].
  static final id = obx.QueryIntegerProperty<UserConnectedMusicService>(
      _entities[4].properties[0]);

  /// See [UserConnectedMusicService.accessToken].
  static final accessToken = obx.QueryStringProperty<UserConnectedMusicService>(
      _entities[4].properties[1]);

  /// See [UserConnectedMusicService.refreshToken].
  static final refreshToken =
      obx.QueryStringProperty<UserConnectedMusicService>(
          _entities[4].properties[2]);

  /// See [UserConnectedMusicService.connectedUserDB].
  static final connectedUserDB =
      obx.QueryRelationToOne<UserConnectedMusicService, UserProfileDB>(
          _entities[4].properties[3]);

  /// See [UserConnectedMusicService.musicLibraryServiceDB].
  static final musicLibraryServiceDB =
      obx.QueryStringProperty<UserConnectedMusicService>(
          _entities[4].properties[4]);

  /// see [UserConnectedMusicService.userPlaylistsDB]
  static final userPlaylistsDB =
      obx.QueryRelationToMany<UserConnectedMusicService, Playlist>(
          _entities[4].relations[0]);
}

/// [UserProfileDB] entity fields to define ObjectBox queries.
class UserProfileDB_ {
  /// See [UserProfileDB.id].
  static final id =
      obx.QueryIntegerProperty<UserProfileDB>(_entities[5].properties[0]);

  /// see [UserProfileDB.allTrackClipsDB]
  static final allTrackClipsDB =
      obx.QueryRelationToMany<UserProfileDB, TrackClip>(
          _entities[5].relations[0]);

  /// see [UserProfileDB.allTrackClipPlaylistsDB]
  static final allTrackClipPlaylistsDB =
      obx.QueryRelationToMany<UserProfileDB, TrackClipPlaylist>(
          _entities[5].relations[1]);

  /// see [UserProfileDB.connectedMusicStreamingServices]
  static final connectedMusicStreamingServices =
      obx.QueryBacklinkToMany<UserConnectedMusicService, UserProfileDB>(
          UserConnectedMusicService_.connectedUserDB);

  /// see [UserProfileDB.streamingServiceBackups]
  static final streamingServiceBackups =
      obx.QueryBacklinkToMany<BackupConnectedServiceContent, UserProfileDB>(
          BackupConnectedServiceContent_.linkedUser);
}

/// [BackupConnectedServiceContent] entity fields to define ObjectBox queries.
class BackupConnectedServiceContent_ {
  /// See [BackupConnectedServiceContent.id].
  static final id = obx.QueryIntegerProperty<BackupConnectedServiceContent>(
      _entities[6].properties[0]);

  /// See [BackupConnectedServiceContent.musicServiceDB].
  static final musicServiceDB =
      obx.QueryStringProperty<BackupConnectedServiceContent>(
          _entities[6].properties[1]);

  /// See [BackupConnectedServiceContent.linkedUser].
  static final linkedUser =
      obx.QueryRelationToOne<BackupConnectedServiceContent, UserProfileDB>(
          _entities[6].properties[2]);

  /// see [BackupConnectedServiceContent.cachedPlaylists]
  static final cachedPlaylists =
      obx.QueryBacklinkToMany<Playlist, BackupConnectedServiceContent>(
          Playlist_.backup);

  /// see [BackupConnectedServiceContent.cachedSongs]
  static final cachedSongs =
      obx.QueryBacklinkToMany<Song, BackupConnectedServiceContent>(
          Song_.backup);

  /// see [BackupConnectedServiceContent.cachedTrackClips]
  static final cachedTrackClips =
      obx.QueryBacklinkToMany<TrackClip, BackupConnectedServiceContent>(
          TrackClip_.backup);
}
