// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'Entities/Song.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 8206777011072132457),
      name: 'Song',
      lastPropertyId: const obx_int.IdUid(9, 4544284274229552321),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3646475469489993490),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5228567039344799239),
            name: 'trackURI',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7387107985471698676),
            name: 'artistName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6665638574963001440),
            name: 'songName',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(1, 8539712309826801651)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3683664839647536894),
            name: 'songImage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8920691947168484270),
            name: 'artistImage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2696696614971057640),
            name: 'albumImage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1667901264461299139),
            name: 'albumName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4544284274229552321),
            name: 'imageURL',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(1, 8206777011072132457),
      lastIndexId: const obx_int.IdUid(1, 8539712309826801651),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Song: obx_int.EntityDefinition<Song>(
        model: _entities[0],
        toOneRelations: (Song object) => [],
        toManyRelations: (Song object) => {},
        getId: (Song object) => object.id,
        setId: (Song object, int id) {
          object.id = id;
        },
        objectToFB: (Song object, fb.Builder fbb) {
          final trackURIOffset = fbb.writeString(object.trackURI);
          final artistNameOffset = object.artistName == null
              ? null
              : fbb.writeString(object.artistName!);
          final songNameOffset = object.songName == null
              ? null
              : fbb.writeString(object.songName!);
          final songImageOffset = object.songImage == null
              ? null
              : fbb.writeString(object.songImage!);
          final artistImageOffset = object.artistImage == null
              ? null
              : fbb.writeString(object.artistImage!);
          final albumImageOffset = object.albumImage == null
              ? null
              : fbb.writeString(object.albumImage!);
          final albumNameOffset = object.albumName == null
              ? null
              : fbb.writeString(object.albumName!);
          final imageURLOffset = object.imageURL == null
              ? null
              : fbb.writeString(object.imageURL!);
          fbb.startTable(10);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, trackURIOffset);
          fbb.addOffset(2, artistNameOffset);
          fbb.addOffset(3, songNameOffset);
          fbb.addOffset(4, songImageOffset);
          fbb.addOffset(5, artistImageOffset);
          fbb.addOffset(6, albumImageOffset);
          fbb.addOffset(7, albumNameOffset);
          fbb.addOffset(8, imageURLOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final trackURIParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final artistNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final songNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final songImageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final artistImageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final albumImageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final albumNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final imageURLParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final object = Song(
              id: idParam,
              trackURI: trackURIParam,
              artistName: artistNameParam,
              songName: songNameParam,
              songImage: songImageParam,
              artistImage: artistImageParam,
              albumImage: albumImageParam,
              albumName: albumNameParam,
              imageURL: imageURLParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Song] entity fields to define ObjectBox queries.
class Song_ {
  /// See [Song.id].
  static final id = obx.QueryIntegerProperty<Song>(_entities[0].properties[0]);

  /// See [Song.trackURI].
  static final trackURI =
      obx.QueryStringProperty<Song>(_entities[0].properties[1]);

  /// See [Song.artistName].
  static final artistName =
      obx.QueryStringProperty<Song>(_entities[0].properties[2]);

  /// See [Song.songName].
  static final songName =
      obx.QueryStringProperty<Song>(_entities[0].properties[3]);

  /// See [Song.songImage].
  static final songImage =
      obx.QueryStringProperty<Song>(_entities[0].properties[4]);

  /// See [Song.artistImage].
  static final artistImage =
      obx.QueryStringProperty<Song>(_entities[0].properties[5]);

  /// See [Song.albumImage].
  static final albumImage =
      obx.QueryStringProperty<Song>(_entities[0].properties[6]);

  /// See [Song.albumName].
  static final albumName =
      obx.QueryStringProperty<Song>(_entities[0].properties[7]);

  /// See [Song.imageURL].
  static final imageURL =
      obx.QueryStringProperty<Song>(_entities[0].properties[8]);
}
